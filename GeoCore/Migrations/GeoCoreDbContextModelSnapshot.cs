// <auto-generated />
using System;
using GeoCore.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GeoCore.Migrations
{
    [DbContext(typeof(GeoCoreDbContext))]
    partial class GeoCoreDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GeoCore.Entities.Apartment", b =>
                {
                    b.Property<string>("ApartmentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApartmentDoor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApartmentFloor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ApartmentPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("BuildingId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HasGarage")
                        .HasColumnType("bit");

                    b.Property<bool>("HasLift")
                        .HasColumnType("bit");

                    b.Property<int>("NumberOfBathrooms")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfRooms")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ApartmentId");

                    b.HasIndex("BuildingId");

                    b.ToTable("Apartments");

                    b.HasData(
                        new
                        {
                            ApartmentId = "APT001",
                            ApartmentDoor = "1A",
                            ApartmentFloor = "1",
                            ApartmentPrice = 1000m,
                            BuildingId = "BLD002",
                            CreatedDate = new DateTime(2021, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HasGarage = false,
                            HasLift = true,
                            NumberOfBathrooms = 1,
                            NumberOfRooms = 2,
                            Status = "Rented"
                        },
                        new
                        {
                            ApartmentId = "APT002",
                            ApartmentDoor = "2A",
                            ApartmentFloor = "2",
                            ApartmentPrice = 1200m,
                            BuildingId = "BLD002",
                            CreatedDate = new DateTime(2021, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HasGarage = true,
                            HasLift = true,
                            NumberOfBathrooms = 2,
                            NumberOfRooms = 3,
                            Status = "Rented"
                        });
                });

            modelBuilder.Entity("GeoCore.Entities.Building", b =>
                {
                    b.Property<string>("BuildingId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BuildingCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BuildingId");

                    b.ToTable("Buildings");

                    b.HasData(
                        new
                        {
                            BuildingId = "BLD002",
                            Address = "Carrer de Sardenya 350",
                            BuildingCode = "BLD002",
                            City = "Barcelona",
                            Latitude = 41.404319999999998,
                            Longitude = 2.1740300000000001,
                            Name = "Edificio Diagonal",
                            PostalCode = "08025",
                            PurchaseDate = new DateTime(2021, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Rented"
                        });
                });

            modelBuilder.Entity("GeoCore.Entities.CashFlow", b =>
                {
                    b.Property<string>("CashFlowId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Amount")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("BuildingId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CashFlowId");

                    b.HasIndex("BuildingId");

                    b.ToTable("CashFlows");
                });

            modelBuilder.Entity("GeoCore.Entities.MaintenanceEvent", b =>
                {
                    b.Property<string>("MaintenanceEventId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BuildingId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Cost")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MaintenanceEventId");

                    b.HasIndex("BuildingId");

                    b.ToTable("MaintenanceEvents");
                });

            modelBuilder.Entity("GeoCore.Entities.Rental", b =>
                {
                    b.Property<string>("RentalId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApartmentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Zone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RentalId");

                    b.ToTable("Rentals");

                    b.HasData(
                        new
                        {
                            RentalId = "REN001",
                            ApartmentId = "APT001",
                            EndDate = new DateTime(2024, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsConfirmed = true,
                            PostalCode = "08025",
                            Price = 1200m,
                            StartDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Zone = "Eixample"
                        },
                        new
                        {
                            RentalId = "REN002",
                            ApartmentId = "APT002",
                            EndDate = new DateTime(2024, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsConfirmed = true,
                            PostalCode = "08025",
                            Price = 1300m,
                            StartDate = new DateTime(2024, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Zone = "Eixample"
                        });
                });

            modelBuilder.Entity("GeoCore.Entities.Apartment", b =>
                {
                    b.HasOne("GeoCore.Entities.Building", "Building")
                        .WithMany("Apartments")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");
                });

            modelBuilder.Entity("GeoCore.Entities.CashFlow", b =>
                {
                    b.HasOne("GeoCore.Entities.Building", null)
                        .WithMany("CashFlows")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GeoCore.Entities.MaintenanceEvent", b =>
                {
                    b.HasOne("GeoCore.Entities.Building", null)
                        .WithMany("MaintenanceEvents")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GeoCore.Entities.Building", b =>
                {
                    b.Navigation("Apartments");

                    b.Navigation("CashFlows");

                    b.Navigation("MaintenanceEvents");
                });
#pragma warning restore 612, 618
        }
    }
}
